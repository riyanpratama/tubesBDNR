/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package utbes;

import java.awt.CardLayout;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import jxl.read.biff.BiffException;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import weka.clusterers.SimpleKMeans;
import weka.core.Instances;

/**
 *
 * @author Dion Tanjung
 */
public class Design extends javax.swing.JFrame {

    CardLayout c;
    Graphs G;
    ImportDataset id;
    Convert Gstream;
    int ing = 0;
    JFrame frame=new JFrame();
    /**
     * Creates new form Design
     */
    public Design() {
        initComponents();
        G = new Graphs();
        reset();
        DefaultTableModel dddd = (DefaultTableModel) jTable4.getModel();
        dddd.setRowCount(500);
        jTable4.setModel(dddd);

        DefaultTableModel dd = (DefaultTableModel) jTable3.getModel();
        dd.setRowCount(500);
        jTable3.setModel(dd);

        DefaultTableModel ddd = (DefaultTableModel) jTable2.getModel();
        ddd.setRowCount(500);
        jTable2.setModel(ddd);

        jTextField1.disable();
        c = (CardLayout) Home.getLayout();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Home = new javax.swing.JPanel();
        View = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel9 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        Detail = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jToggleButton2 = new javax.swing.JToggleButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        Queries = new javax.swing.JPanel();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jButton8 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtNumbCluster = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        cmbBaseCluster = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Home.setLayout(new java.awt.CardLayout());

        jButton1.setText("Impor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Bantuan");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setToolTipText("Enter your Query Here");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setName("ds"); // NOI18N

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Graph Analysis");

        jLabel2.setText("Type");

        jLabel3.setText("Jumlah Node");

        jLabel4.setText("Jumlah Edge");

        jLabel5.setText("Diameter");

        jLabel6.setText("Betweness");

        jLabel7.setText("Closeness");

        jLabel8.setText("Ecentrycity");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jToggleButton1.setText("Detail");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel9.setText("Info");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(116, 116, 116))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jToggleButton1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel9)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToggleButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButton3.setText("Run");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton9.setText("Clustering");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewLayout = new javax.swing.GroupLayout(View);
        View.setLayout(ViewLayout);
        ViewLayout.setHorizontalGroup(
            ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ViewLayout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        ViewLayout.setVerticalGroup(
            ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ViewLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextArea1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTextArea1.getAccessibleContext().setAccessibleName("");

        Home.add(View, "card1");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Node", "Closeness"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        jToggleButton2.setText("Back");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1211, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton2))
        );

        jTabbedPane1.addTab("Closeness", jPanel3);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Node", "Betweness"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1211, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Betweness", jPanel4);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Node", "Eccentricity"
            }
        ));
        jScrollPane5.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1211, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Electricity", jPanel5);

        javax.swing.GroupLayout DetailLayout = new javax.swing.GroupLayout(Detail);
        Detail.setLayout(DetailLayout);
        DetailLayout.setHorizontalGroup(
            DetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DetailLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        DetailLayout.setVerticalGroup(
            DetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DetailLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        Home.add(Detail, "card3");

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);

        jLabel10.setText("Query");

        jButton4.setText("Run");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel11.setText("Info");

        jButton5.setText("Match");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("View");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Back");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane6.setViewportView(jTextArea4);

        jButton8.setText("Help");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout QueriesLayout = new javax.swing.GroupLayout(Queries);
        Queries.setLayout(QueriesLayout);
        QueriesLayout.setHorizontalGroup(
            QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QueriesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(QueriesLayout.createSequentialGroup()
                        .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextArea3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QueriesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, QueriesLayout.createSequentialGroup()
                .addContainerGap(1016, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        QueriesLayout.setVerticalGroup(
            QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(QueriesLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextArea3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(QueriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        Home.add(Queries, "card4");

        jLabel12.setText("Number of Cluster");

        txtNumbCluster.setText("4");
        txtNumbCluster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumbClusterActionPerformed(evt);
            }
        });

        jButton10.setText("Cluster");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        cmbBaseCluster.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Actor", "Movie" }));

        jLabel13.setText("Based On");

        txtAreaOutput.setColumns(20);
        txtAreaOutput.setRows(5);
        jScrollPane1.setViewportView(txtAreaOutput);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel13)
                                .addComponent(jLabel12))
                            .addGap(27, 27, 27)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNumbCluster)
                                .addComponent(cmbBaseCluster, 0, 116, Short.MAX_VALUE)))
                        .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtNumbCluster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBaseCluster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        Home.add(jPanel2, "card5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("xls only", "xls");
        fileChooser.setFileFilter(filter);

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            jTextArea1.setText("Open " + fileChooser.getSelectedFile().getAbsolutePath());
            //   jTextArea1.disable();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (jTextArea1.getText() != null || !jTextArea1.getText().contains("Enter")) {
            if (jTextArea1.getText().contains("graph matching")) {
                c.show(Home, "card4");
                P = new Graphs();
                ing = 1;
            } else {
                query(jTextArea1.getText(), G);
                jTextArea1.enable();
                jTextArea1.setText("Enter your query here");
                analisis();
                setText();
                ing = 0;
            }
        } else {
            jTextArea2.setText("masukkan query");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        c.show(Home, "card3");
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
        c.show(Home, "card1");
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String S = "*) insert Node => create node(aktor a{nama: Lee Min ho}) \n"
                + "Insert edge => create edge (aktor b where {nama: Lee Min ho})-[peran:pembantu]-(movie c where {judul= Full House})  \n"
                + "Cari posisi node=> match (aktor b) where {nama: Lee Min Ho} return b \n"
                + "Cari node label=> match (aktor b) return b \n"
                + "Cari node dan relasi=> match (aktor b) where {nama: Lee Min Ho} return b,- \n"
                + "graph matching=> graph matching";

        jTextArea2.setText(S);
        jTextArea2.enable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        c.show(Home, "card1");
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (jTextArea3.getText() != null || !jTextArea3.getText().contains("Enter")) {
            query(jTextArea3.getText(), P);
            jTextArea3.enable();
            jTextArea3.setText("Enter your query here");
        } else {
            jTextArea3.setText("masukkan query");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Gstream = new Convert(P);
        Gstream.run();
        Gstream.displayG("");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
      String S = "=>view semua graph \n "
                + "return all \n\n"
                + "=>insert node\n"
                + "create node(aktor a{nama: Lee Po})\n\n"
                + "=>insert edge\n"
                + "create edge (aktor b where {nama: Lee})-[peran:pembantu]-(aktor c where {nama: Lee P})\n\n"
                + "=>cari posisi node \n"
                + "match (aktor b) where {nama: Lee Pil Mo} return b \n\n"
                + "=>cari node dan relasinya (kedalaman 1)\n"
                + "match (aktor b) -[:peran]= movie m) where {nama: Lee Pil Mo} return b,m \n\n"
                + "=>cari berdasarkan label\n"
                + "match (aktor b) return b\n\n"
                + "=>complex\n"
                + "match (movie m)  where -[played]- (aktor b{nama: Lee Min Ho}) <AND> -[played]- (aktor s{nama: Chun Ho Jin}) \n\n"
                + "=>kedalaman 2\n"
                + "match (aktor b{nama: Bi}) -[:peran]-> (movie m{judul: Full House}) AND (movie m) -[:peran]-> (aktor b{nama: Lee Min Ho}) return \n\n";
        jTextArea2.setText(S);
        jTextArea2.enable();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        FeasibilityMates M = new FeasibilityMates();
        M.run(G, P);
        System.out.println("daftar mapping");
        System.out.println(M.View());

        Prunning2 p = new Prunning2();
        p.run(M);
        System.out.println("daftar mapping");
        System.out.println(M.View());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        c.show(Home, "card5");
    }//GEN-LAST:event_jButton9ActionPerformed

    private void txtNumbClusterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumbClusterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumbClusterActionPerformed

    // read dataset for weka
    public static BufferedReader readDataFile(String filename) {
        BufferedReader inputReader = null;

        try {
            inputReader = new BufferedReader(new FileReader(filename));
        } catch (FileNotFoundException ex) {
            System.err.println("File not found: " + filename);
        }

        return inputReader;
    }

    public void cluster(int numbCluster, String dataCluster, String datasetApa) throws Exception {

        int numberOfCluster = numbCluster;
        String dataForClustering = dataCluster;
        String dataset = datasetApa;
        Instances data;

        SimpleKMeans kmeans = new SimpleKMeans();

        kmeans.setSeed(10);

        //important parameter to set: preserver order, number of cluster.
        kmeans.setPreserveInstancesOrder(true);
        kmeans.setNumClusters(numberOfCluster);

        if (datasetApa.equals("actor")) {

            BufferedReader datafile = readDataFile("actor.arff");
            data = new Instances(datafile);
        } else {
            BufferedReader datafile = readDataFile("movie.arff");
            data = new Instances(datafile);
        }

        kmeans.buildClusterer(data);

        // This array returns the cluster number (starting with 0) for each instance
        // The array has as many elements as the number of instances
        int[] assignments = kmeans.getAssignments();

        String[] actor = {"Park Shin Hye",
            "Bi",
            "Chae Jung Ahn",
            "Choi Jin Hyuk",
            "Choi Jung Woo",
            "Choi Woo Sik",
            "Choi Yeo Jin",
            "Chun Ho Jin",
            "Gong Hyo Jin",
            "Gong Yoo",
            "Ha Ji Won",
            "Han Eun Jung",
            "Han Ji Min",
            "Hong Soo Hyun",
            "Hwang Bo Ra",
            "Hyun Bin",
            "Im Yoon Ah",
            "Jang Dong Gun",
            "Jang Geun Suk",
            "Jang Hyuk",
            "Jang Na Ra",
            "Jo Eun Ji",
            "Jo In Sung",
            "Jo Yoon Hee",
            "Joo Ji Hoon",
            "Jun Ji Hyun",
            "Jung Hye Young",
            "Jung Jin Young",
            "Jung So Min",
            "Jung Yong Hwa",
            "Jung Yoo Mi",
            "Kang Ji Hwan",
            "Kang Nam Gil",
            "Kim Bum",
            "Kim Chang  Wan",
            "Kim Dong Wook",
            "Kim Ha Neul",
            "Kim Hee Sun",
            "Kim Hyun Joong",
            "Kim Jae Wook",
            "Kim Jeong Hoon",
            "Kim Ji Soo",
            "Kim Ji Suk",
            "Kim Ji Won",
            "Kim Joon",
            "Kim Min Jong",
            "Kim Sa Rang",
            "Kim Sang Joong",
            "Kim Soo Hyun",
            "Kim Soo Ro",
            "Kim Sung Ryung",
            "Kim Sung Soo",
            "Kim Yoo Ri ",
            "Kim Young Ok",
            "Kyo Hye Sun",
            "Lee Bum Soo",
            "Lee Hong Ki",
            "Lee Jong Hyuk",
            "Lee Joon Hyuk",
            "Lee Kwang So",
            "Lee Min Ho",
            "Lee Philip",
            "Lee Pil Mo",
            "Lee Si Young",
            "Lee Sun Gyun",
            "Lee Tae Sung",
            "Lee Un",
            "Lee Young Eun",
            "Micky Yoochun",
            "Park Hae Jin",
            "Park Jin Joo",
            "Park Min Young",
            "Park Shin Hye",
            "Ryu Duk Hwan",
            "Ryu Jin",
            "Seo In Guk",
            "So Ji Sub",
            "Son Eun Seo",
            "Son Ye Jin",
            "Song Hye Kyo",
            "Song Ji Hyo",
            "Song Ji Hyo",
            "Sung Dong Il",
            "Sung Joon",
            "Uee",
            "Wang Ji Hye",
            "Wang Ji Won",
            "Yang Jin Sung"};

        String[] movie = {
            "A Gentlemans Dignity",
            "Boys Before Flowers",
            "Bridge of the century",
            "City Hunter",
            "Coffee Prince",
            "Emergency Couple",
            "Faith",
            "Fated to Love You",
            "Full House",
            "Heartstrings",
            "Its Okay Its Love",
            "Lie To Me",
            "Love Rain",
            "My Love From Another Star",
            "Personal Preference",
            "Playful Kiss",
            "Prime Minister and I",
            "Princess Hours",
            "Rooftop Prince",
            "Secret Garden",
            "The Heirs",
            "The Masters Sun",
            "Youre Beautiful"
        };

        // test code 
        //txtAreaOutput.setText(dataset);

        // iterate each node
        int i = 0;
        for (int clusterNum : assignments) {
            // add text into text area
            if (datasetApa.equals("Actor")) {
                String sda = "Actor " + actor[i] + " -> On Cluster " + clusterNum + "\n";
                txtAreaOutput.append(sda);
                i++;
            } else if (datasetApa.equals("Movie")) {
                String sda = "Movie " + movie[i] + " -> On Cluster " + clusterNum + "\n";
                txtAreaOutput.append(sda);
                i++;
            } else {
                txtAreaOutput.setText(null);
            }
        }
    }
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:

        // clear txt area
        txtAreaOutput.setText(null);

        String numbOfCluster = this.txtNumbCluster.getText();
        String basedClustering = this.cmbBaseCluster.getSelectedItem().toString();
        String datasetApa = this.cmbBaseCluster.getSelectedItem().toString();

        try {
            cluster(Integer.parseInt(numbOfCluster), basedClustering, datasetApa);
        } catch (Exception ex) {
            Logger.getLogger(Design.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton10ActionPerformed
    public void setText() {
        jTextField1.setText("Undirected");
        jTextField2.setText("" + G.getSizeNode());
        jTextField3.setText("" + G.getSizeedge());
        jTextField4.setText("" + Gstream.getDIameter());
        jTextField5.setText("" + Gstream.getBetweness());
        jTextField6.setText("" + Gstream.getCloseness());
        jTextField7.setText("" + Gstream.getEcentricity());

    }

    public void analisis() {
        Gstream.Ecentricity();
        Gstream.BEtweness();
        Gstream.Closenesss();
        int i = 0;
        for (String s : Gstream.BEtweness()) {
            for (int a = 0; a < s.length(); a++) {
                if (s.charAt(a) == ':') {
                    jTable2.setValueAt(s.substring(0, a), i, 0);
                    jTable2.setValueAt(s.substring(a), i, 1);
                }
            }
            i++;
        }
        i = 0;
        for (String s : Gstream.Closenesss()) {
            for (int a = 0; a < s.length(); a++) {
                if (s.charAt(a) == ':') {
                    jTable4.setValueAt(s.substring(0, a), i, 0);
                    jTable4.setValueAt(s.substring(a), i, 1);
                }
            }
            i++;
        }
        i = 0;
        for (String s : Gstream.Ecentricity()) {
            for (int a = 0; a < s.length(); a++) {
                if (s.charAt(a) == ':') {
                    jTable3.setValueAt(s.substring(0, a), i, 0);
                    jTable3.setValueAt(s.substring(a), i, 1);
                }
            }
            i++;
        }
    }

    public void query(String query, Graphs Q) {
         frame.show(false);
        frame = new JFrame();
        frame.setSize(950, 540);
        frame.setLocation(30, 85);
        frame.setAlwaysOnTop(true);
        frame.setResizable(false);
        Node n = null;
        int temp = 0;
        if (query != null || !query.contains("Enter")) {
            if (query.contains("create node")) {
                Q_CreateNode(Q, query);
            } else if (query.contains("match") && !query.contains("create")) {
                if (query.contains("where")) {
                    if (query.contains("-") && !query.contains("=")) {
                        Q_Complex(Q, query);
                    } else if (query.contains("-") && query.contains("=")) {
                        System.out.println("k");
                        Q_MatchRelasi(Q, query);
                    } else {
                        Q_Highlight(Q, query);
                    }
                } else if (query.contains(">") && !query.contains("where")) {
                    Q_Dephth(Q, query);
                } else {
                    if (query.contains("aktor")) {
                        Gstream = new Convert(Q);
                        Gstream.run();
                        View view = Gstream.displayG("aktor");
                        frame.add(view);
                        frame.show();

                    } else if (query.contains("movie")) {
                        Gstream = new Convert(Q);
                        Gstream.run();
                        View view = Gstream.displayG("movie");
                        frame.add(view);
                        frame.show();

                    }
                }
            } else if (query.contains("create edge")) {
                Q_CreateEdge(Q, query);
            } else if (jTextArea1.getText().contains("Open")) {
                Q_Open(Q);
            } else if (jTextArea1.getText().contains("return all")) {
                Q_viewAll(Q);
            }
        }
    }
    
    public void Q_Dephth(Graphs Q, String query) {
        int temp = 0;
        Graphs Y = new Graphs();
        ArrayList<String> att = new ArrayList<>();
        ArrayList<Node> aNode = new ArrayList<>();
        for (int i = 0; i < query.length(); i++) {
            if (query.charAt(i) == '{') {
                temp = i + 1;
            } else if (query.charAt(i) == '}') {
                att.add(query.substring(temp, i));
            }
        }
        for (String y : att) {
            Node a = Q.cariNode(y);
            if (a != null) {
                aNode.add(a);
            } else {
                try {
                    throw new Exception();
                } catch (Exception ex) {
                    System.out.println("Node tak ditemukan ");
                }
                aNode.clear();
                break;
            }
        }
        if (!aNode.isEmpty()) {
            for (int i = 0; i < aNode.size(); i++) {
                Node a = aNode.get(i);
                Node abaru = new Node(a.getInfo());
                abaru.Attribut(a.to_attribut());
                if (Y.cariNode(a.getInfo()) == null) {
                    Y.addNode(abaru);
                }

                for (Edge e : a.getArrayEdge()) {
                    Node c = new Node(e.getNode().getInfo());
                    c.Attribut(e.getNode().to_attribut());
                    if (i + 1 != aNode.size()) {
                        Node b = aNode.get(i + 1);
                        Node bbaru = new Node(b.getInfo());
                        bbaru.Attribut(b.to_attribut());
                        if (e.getNode().getInfo().contains(b.getInfo())) {
                            if (Y.cariNode(b.getInfo()) == null) {
                                Y.addNode(bbaru);
                                Y.addEdge(e.getInfo(), a.getInfo(), b.getInfo());
                            }

                        } else if (!e.getNode().getInfo().contains(b.getInfo())) {
                            if (Y.cariNode(c.getInfo()) == null) {
                                Y.addNode(c);
                                Y.addEdge(e.getInfo(), a.getInfo(), c.getInfo());
                            }
                        }
                    } else {
                        if (Y.cariNode(c.getInfo()) == null) {
                            Y.addNode(c);
                            Y.addEdge(e.getInfo(), a.getInfo(), c.getInfo());
                        }
                    }
                }
            }
            Gstream = new Convert(Y);
            Gstream.run();
            View view = Gstream.displayG("");
            frame.add(view);
            frame.show();
            jTextArea2.setText(Y.view());
        }

    }

    public void Q_Highlight(Graphs Q, String query) {
        int temp = 0;
        Node n;
        for (int i = 0; i < query.length(); i++) {
            if (query.charAt(i) == '{') {
                temp = i + 1;
            } else if (query.charAt(i) == '}') {
                if (Q.cariNode(query.substring(temp, i)) != null) {
                    n = Q.cariNode(query.substring(temp, i));
                    if (n != null) {
                        Gstream = new Convert(Q);
                        Gstream.run();
                        View view = Gstream.displayG("highlight " + n.getInfo());
                        frame.add(view);
                        frame.show();
                        jTextArea2.setText(n.toString());
                    }
                } else {
                    jTextArea2.setText("not Found");

                }
            }
        }
    }

    public void Q_Complex(Graphs Q, String query) {
        int temp = 0;
        int c = 0;
        ArrayList<String> Yes = new ArrayList<>();
        ArrayList<String> No = new ArrayList<>();
        String quer = null;
        String join = null;
        for (int i = 0; i < query.length(); i++) {
            if (c == 0) {
                if (query.charAt(i) == '(') {
                    temp = i + 1;
                } else if (query.charAt(i) == ')') {
                    quer = query.substring(temp, i - 2);
                    c++;
                }
            } else {
                if (query.charAt(i) == '<') {
                    temp = i + 1;
                } else if (query.charAt(i) == '>') {
                    join = query.substring(temp, i);
                } else if (query.charAt(i) == '{') {
                    temp = i + 1;
                } else if (query.charAt(i) == '}') {
                    if (join == null) {
                        Yes.add(query.substring(temp, i));
                    } else if (join.contains("AND")) {
                        Yes.add(query.substring(temp, i));
                    } else if (join.contains("NOT")) {
                        No.add(query.substring(temp, i));
                    }
                }

            }
        }
        Q_SearchingComplexs(Q, quer, Yes, No);
    }

    public void Q_SearchingComplexs(Graphs Q, String info, ArrayList<String> yes, ArrayList<String> no) {
        ArrayList<Node> Match = new ArrayList<>();
        ArrayList<Node> MatchFix = new ArrayList<>();
        int temp = 0;
        for (Node n : Q.getNode()) {
            if (n.getLabel().contains(info)) {
                Match.add(n);
            }
        }

        for (Node m : Match) {
            temp = 0;
            for (String s : yes) {
                for (Edge e : m.getArrayEdge()) {
                    if (s.contains(e.getNode().getInfo())) {
                        temp++;
                    }
                }
            }
            if ((temp) == yes.size()) {
                MatchFix.add(m);
            }
        }

        Match.clear();
        for (Node m : MatchFix) {
            temp = 0;
            for (String s : no) {
                for (Edge e : m.getArrayEdge()) {
                    if (s.contains(e.getNode().getInfo())) {
                        temp++;
                    }
                }
            }
            if (temp == 0) {
                Match.add(m);
            }
        }
        MatchFix.clear();

        Graphs Y = new Graphs();
        String s = "";
        for (Node m : Match) {
            Y.addNode(m);
            s += m.toString() + "\n";
        }
        Gstream = new Convert(Y);
        Gstream.Run();
        View view = Gstream.displayG("");
        frame.add(view);
        frame.show();
        jTextArea2.setText(s);
    }

    public void Q_MatchRelasi(Graphs Q, String query) {
        int temp = 0;
        Node n = null;
        Graphs E = new Graphs();
        for (int i = 0; i < query.length(); i++) {
            if (query.charAt(i) == '{') {
                temp = i + 1;
            } else if (query.charAt(i) == '}') {
                if (Q.cariNode(query.substring(temp, i)) != null) {
                    n = Q.cariNode(query.substring(temp, i));
                    if (n != null) {
                        Node f = new Node(n.getInfo());
                        f.Attribut(n.to_attribut());
                        E.addNode(f);
                        for (Edge e : n.getArrayEdge()) {
                            Node h = new Node(e.getNode().getInfo());
                            h.Attribut(e.getNode().to_attribut());
                            E.addNode(h);
                            E.addEdge(e.getInfo(), f.getInfo(), h.getInfo());
                        }
                        Gstream = new Convert(E);
                        Gstream.run();
                        View view = Gstream.displayG("");
                        frame.add(view);
                        frame.show();
                        jTextArea2.setText(n.getInfo());
                    }
                } else {
                    jTextArea2.setText("not Found");
                }
            }
        }
    }

    public void Q_CreateNode(Graphs Q, String query) {
        int temp = 0;
        ArrayList<String> attribut = new ArrayList<>();
        String a = "";
        //parsing untuk mendapat attribut node, masukkan ke attribut
        for (int i = 0; i < query.length(); i++) {
            if (query.charAt(i) == '{') {
                temp = i + 1;
            } else if (query.charAt(i) == '}') {
                attribut.add(query.substring(temp, i));
            }
        }
        //insert node baru dari array attribut
        for (String att : attribut) {
            Node o = new Node(att);
            Q.addNode(o);
            a += o.getInfo() + " \n";
        }
        Gstream = new Convert(Q);
        Gstream.run();
        View view = Gstream.displayG("");
        frame.add(view);
        frame.show();
        jTextArea2.setText("Insert Sukses : \n " + a);
    }

    public void Q_CreateEdge(Graphs Q, String query) {
        ArrayList<String> attribut = new ArrayList<>();
        ArrayList<String> info = new ArrayList<>();
        int temp = 0, t = 0;
        for (int i = 0; i < query.length(); i++) {
            if (query.charAt(i) == '{') {
                temp = i + 1;
            } else if (query.charAt(i) == '}') {
                if (t == 0) {
                    attribut.add(query.substring(temp, i));
                    t++;
                } else {
                    attribut.add(query.substring(temp, i));
                    t--;
                }
            } else if (query.charAt(i) == '[') {
                temp = i + 1;
            } else if (query.charAt(i) == ']') {
                info.add(query.substring(temp, i));
            }
        }
        Node a = null, b = null;
        String tt = "";
        for (int j = 0; j < attribut.size(); j++) {
            if ((j + 1) % 2 != 0) {
                a = Q.cariNode(attribut.get(j));
                System.out.println(a.getInfo());
            } else if ((j + 1) % 2 == 0) {
                b = Q.cariNode(attribut.get(j));
                if (a != null && b != null) {
                    String inf = info.get(0);
                    Q.addEdge(inf, a.getInfo(), b.getInfo());
                    tt += "create ke-" + (j - 1) + " sukses ";
                } else {
                    tt += "create ke-" + (j - 1) + "tidak ditemukan";
                }
                if (info.size() >= 0) {
                    info.remove(0);
                }
            }

        }
        jTextArea2.setText(tt);
        Q_viewAll(Q);
    }

    public void Q_Open(Graphs Q) {
        try {
            id = new ImportDataset(jTextArea1.getText().substring(5));
        } catch (IOException ex) {
            Logger.getLogger(Design.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(Design.class.getName()).log(Level.SEVERE, null, ex);
        }
        id.Run(Q);
        Q_viewAll(Q);
    }

    public void Q_viewAll(Graphs Q) {
        Gstream = new Convert(Q);
        Gstream.run();
        View view = Gstream.displayG("");
        frame.add(view);
        frame.show();
        jTextArea2.setText(Q.view());
    }

    public void reset() {
        jTextArea1.enable();
        jTextArea2.disable();
        jTextField1.disable();
        jTextField2.disable();
        jTextField3.disable();
        jTextField4.disable();
        jTextField5.disable();
        jTextField6.disable();
        jTextField7.disable();
        jTextArea2.setText(null);
        jTextField1.setText(null);
        jTextField2.setText(null);
        jTextField3.setText(null);
        jTextField4.setText(null);
        jTextField5.setText(null);
        jTextField6.setText(null);
        jTextField7.setText(null);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Design.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Design().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Detail;
    private javax.swing.JPanel Home;
    private javax.swing.JPanel Queries;
    private javax.swing.JPanel View;
    private javax.swing.JComboBox cmbBaseCluster;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JTextArea txtAreaOutput;
    private javax.swing.JTextField txtNumbCluster;
    // End of variables declaration//GEN-END:variables
}
